"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _reactMomentProptypes = require("react-moment-proptypes");

var _formatDate3 = _interopRequireDefault(require("./format-date"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ReactMomentCountDown = function ReactMomentCountDown(_ref) {
  var toDate = _ref.toDate,
      sourceFormatMask = _ref.sourceFormatMask,
      targetFormatMask = _ref.targetFormatMask,
      onTick = _ref.onTick,
      onCountdownEnd = _ref.onCountdownEnd,
      otherProps = _objectWithoutProperties(_ref, ["toDate", "sourceFormatMask", "targetFormatMask", "onTick", "onCountdownEnd"]);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      countdown = _useState2[0],
      setCountdown = _useState2[1];

  var timer = (0, _react.useRef)();

  var tick = function tick() {
    var _formatDate = (0, _formatDate3["default"])(toDate, targetFormatMask, sourceFormatMask),
        _formatDate2 = _slicedToArray(_formatDate, 2),
        delta = _formatDate2[0],
        lastCountdown = _formatDate2[1];

    if (delta <= 0) {
      clearInterval(timer.current);
      timer.current = null;
      onCountdownEnd();
    } else {
      setCountdown(lastCountdown);
      onTick(delta);
    }
  }; // componentDidMount, componentWillUmnount


  (0, _react.useEffect)(function () {
    tick();
    timer.current = setInterval(tick, 1000);
    return function () {
      return clearInterval(timer.current);
    };
  }, []);
  return _react["default"].createElement("span", otherProps, countdown);
};

ReactMomentCountDown.propTypes = {
  toDate: (0, _propTypes.oneOfType)([_reactMomentProptypes.momentObj, (0, _propTypes.instanceOf)(Date), _propTypes.string]).isRequired,
  sourceFormatMask: _propTypes.string.isRequired,
  targetFormatMask: _propTypes.string.isRequired,
  onTick: _propTypes.func.isRequired,
  onCountdownEnd: _propTypes.func.isRequired
};
ReactMomentCountDown.defaultProps = {
  sourceFormatMask: 'YYYY-MM-DD',
  targetFormatMask: 'HH:mm:ss',
  onTick: function onTick(f) {
    return f;
  },
  onCountdownEnd: function onCountdownEnd(f) {
    return f;
  }
};
var _default = ReactMomentCountDown;
exports["default"] = _default;